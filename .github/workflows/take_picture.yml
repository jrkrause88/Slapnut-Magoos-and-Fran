# import the necessary packages
from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import cv2

#new code for edge detection
import numpy as np
import matplotlib
from matplotlib import pyplot as plt

if __name__ == '__main__':
 
   fileName = input("File Name:")

   # initialize the camera and grab a reference to the raw camera capture
   camera = PiCamera()
   camera.resolution = (1920,1088)
   rawCapture = PiRGBArray(camera)
 
   # allow the camera to warmup
   time.sleep(0.1)

   #new code to resize image
   #resized = cv2.resize(rawCapture, dim, interpolation = cv2.INTER_AREA)
 
   # grab an image from the camera
   print("Capturing Image...")
   try:
      camera.capture(rawCapture, format="bgr")
      image = rawCapture.array
   except:
      print("Failed to capture")
      pass

   # save the image to the disk
   print("Saving image "+fileName)
   try:
      cv2.imwrite(fileName, image)
   except:
      print("Couldn't save "+fileName)
      pass

   #new code to save edge image
   print("Saving edge image "+fileName)
   try:
      img = cv2.imread(fileName, 0)
      edges = cv2.Canny(img,100,200)
      plt.subplot(121),plt.imshow(img,cmap = 'gray')
      plt.title('Original Image'),plt.xticks([]),plt.yticks([])
      plt.subplot(122),plt.imshow(edges,cmap = 'gray')
      plt.title('Edge Image'),plt.xticks([]),plt.yticks([])
      plt.show()
      #fileName = "edgeimage.png"
      #cv2.imwrite(fileName, img)
   except:
      print("Couldn't save edge image "+fileName)
      pass
